dbListTables(con)
DBI::dbGetQuery(conn = con,
statement = "
SELECT COUNT(*)
FROM listings
")## [1] "population" "who"
#Load the reviews table
dbWriteTable(conn = con,
name = "SG_reviews",
value = reviews)
#Import the data
listings <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Singapore/listings.csv", comment.char="#")
reviews <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Singapore/reviews.csv", comment.char="#")
calendar <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Singapore/calendar.csv", comment.char="#")
#Aperçu des données
listings
reviews
calendar
#Build the placeholder
con <- dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
dbListTables(con)
#Load the reviews table
dbWriteTable(conn = con,
name = "SG_reviews",
value = reviews)
#Load the listings table
dbWriteTable(conn = con,
name = "SG_listings",
value = listings)
#Load the calendar table
dbWriteTable(conn = con,
name = "SG_calendar",
value = calendar)
dbListTables(con)
DBI::dbGetQuery(conn = con,
statement = "
SELECT COUNT(*)
FROM SG_listings
")## [1] "population" "who"
library(odbc)
library(DBI)
library(tidyverse)
# Paris
listings_Paris <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Paris/listings.csv", comment.char="#")
reviews_Paris <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Paris/reviews.csv", comment.char="#")
calendar_Paris <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Paris/calendar.csv", comment.char="#")
# Bordeaux
listings_Bordeaux <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Bordeaux/listings.csv", comment.char="#")
reviews_Bordeaux <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Bordeaux/reviews.csv", comment.char="#")
calendar_Bordeaux <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Bordeaux/calendar.csv", comment.char="#")
# Lyon
listings_Lyon <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Lyon/listings.csv", comment.char="#")
reviews_Lyon <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Lyon/reviews.csv", comment.char="#")
calendar_Lyon <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Lyon/calendar.csv", comment.char="#")
save.image("~/Documents/Formation/Github/Airbnb_Database_SQL/Airbnb_France_database.RData")
#Load the reviews table
dbWriteTable(conn = con,
name = "reviews_Paris",
value = reviews_Paris)
#Load the listings table
dbWriteTable(conn = con,
name = "listings_Paris",
value = listings_Paris)
#Load the calendar table
dbWriteTable(conn = con,
name = "calendar_Paris",
value = calendar_Paris)
#Build the placeholder
con <- dbConnect(drv = RSQLite::SQLite(),
dbname = ":memory:")
dbListTables(con)
#Load the reviews table
dbWriteTable(conn = con,
name = "reviews_Paris",
value = reviews_Paris)
#Load the listings table
dbWriteTable(conn = con,
name = "listings_Paris",
value = listings_Paris)
#Load the calendar table
dbWriteTable(conn = con,
name = "calendar_Paris",
value = calendar_Paris)
DBI::dbGetQuery(conn = con,
statement = "
SELECT COUNT(*)
FROM listings_Paris
")
rm("listings_Paris", "reviews_Paris", "calendar_Paris")
#Load the reviews table
dbWriteTable(conn = con,
name = "reviews_Bordeaux",
value = reviews_Bordeaux)
#Load the listings table
dbWriteTable(conn = con,
name = "listings_Bordeaux",
value = listings_Bordeaux)
dbWriteTable(conn = con,
name = "calendar_Bordeaux",
value = calendar_Bordeaux)
rm("listings_Bordeaux", "reviews_Bordeaux", "calendar_Bordeaux")
#Load the reviews table
dbWriteTable(conn = con,
name = "reviews_Lyon",
value = reviews_Lyon)
#Load the listings table
dbWriteTable(conn = con,
name = "listings_Lyon",
value = listings_Lyon)
# Load the calendar table
dbWriteTable(conn = con,
name = "calendar_Lyon",
value = calendar_Lyon)
rm("listings_Lyon", "reviews_Lyon", "calendar_Lyon")
# Afficher les tables disponibles
dbListTables(con)
query <- "SELECT TOP 50 * FROM listings_Paris"
DBI::dbGetQuery(conn = con, statement = query)
query <- "SELECT * FROM listings_Paris LIMIT 10"
DBI::dbGetQuery(conn = con, statement = query)
gc()
gc()
save.image("~/Documents/Formation/Github/Airbnb_Database_SQL/Airbnb_France_SQLdatabase.RData")
query <-
"SELECT *
FROM listings_Paris
LIMIT 10 ;"
DBI::dbGetQuery(conn = con, statement = query)
result = DBI::dbGetQuery(conn = con, statement = query)
View(result)
query <-
"SELECT *
FROM reviews_Paris
LIMIT 10 ;"
result = DBI::dbGetQuery(conn = con, statement = query)
View(result)
query <-
"SELECT *
FROM calendar_Paris
LIMIT 10 ;"
result = DBI::dbGetQuery(conn = con, statement = query)
load("~/Documents/Formation/Github/0_Data/Airbnb_Paris/Airbnb_France_csv.RData")
listings = union_all(listings_Paris, listings_Bordeaux, listings_Lyon)
# Import relevant packages
library(odbc)
library(DBI)
library(tidyverse)
library(dplyr)
listings = union_all(listings_Paris, listings_Bordeaux, listings_Lyon)
listings = rbind(listings_Paris, listings_Bordeaux, listings_Lyon)
rm(listings_Paris, listings_Bordeaux, listings_Lyon)
reviews = rbind(reviews_Paris, reviews_Bordeaux, reviews_Lyon)
rm(reviews_Paris, reviews_Bordeaux, reviews_Lyon)
calendar = rbind(calendar_Paris, calendar_Bordeaux, calendar_Lyon)
rm(calendar_Paris, calendar_Bordeaux, calendar_Lyon)
# Metadata : nom des colonnes, leur type, nombre de lignes et colonnes
summary(listings)
listings <- read.csv("~/Documents/Formation/Github/0_Data/Airbnb_Bordeaux/listings.csv", encoding="UTF-8", header=FALSE, comment.char="#")
View(listings)
string = "~/Documents/Formation/Github/0_Data/"
# Paris
listings_Paris <- read.csv(string + "Airbnb_Paris/listings.csv", encoding="UTF-8", comment.char="#")
# Paris
listings_Paris <- read.csv(paste0(string + "Airbnb_Paris/listings.csv"), encoding="UTF-8", comment.char="#")
# Paris
listings_Paris <- read.csv(paste0(string, "Airbnb_Paris/listings.csv"), encoding="UTF-8", comment.char="#")
# Metadata : nom des colonnes, leur type, nombre de lignes et colonnes
str(listings)
# Metadata : nom des colonnes, leur type, nombre de lignes et colonnes
str(listings)
View(listings)
# Import relevant packages
library(odbc)
library(DBI)
library(dplyr)
string = "~/Documents/Formation/Github/0_Data/"
# Paris
listings_Paris <- read.csv(paste0(string, "Airbnb_Paris/listings.csv"), encoding="UTF-8", comment.char="#")
View(listings_Paris)
reviews_Paris <- read.csv(paste0(string, "Airbnb_Paris/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Paris <- read.csv(paste0(string, "Airbnb_Paris/calendar.csv"), encoding="UTF-8", comment.char="#")
# Bordeaux
listings_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/calendar.csv"), encoding="UTF-8", comment.char="#")
# Lyon
listings_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/calendar.csv"), encoding="UTF-8", comment.char="#")
View(calendar_Bordeaux)
View(calendar_Lyon)
View(calendar_Paris)
View(listings_Bordeaux)
View(listings_Lyon)
View(listings_Paris)
listings = rbind(listings_Paris, listings_Bordeaux, listings_Lyon)
View(listings)
rm(listings_Paris, listings_Bordeaux, listings_Lyon)
reviews = rbind(reviews_Paris, reviews_Bordeaux, reviews_Lyon)
rm(reviews_Paris, reviews_Bordeaux, reviews_Lyon)
calendar = rbind(calendar_Paris, calendar_Bordeaux, calendar_Lyon)
rm(calendar_Paris, calendar_Bordeaux, calendar_Lyon)
gc()
# Metadata : nom des colonnes, leur type, nombre de lignes et colonnes
str(listings)
# Metadata : nom des colonnes, leur type, nombre de lignes et colonnes
str(calendar)
library(lubridate)
# Metadata : nom des colonnes, leur type, nombre de lignes et colonnes
str(calendar)
# Transformation à opérer
test <- calendar %>% select(date) %>% ymd()
library(dplyr)
# Transformation à opérer
test <- calendar %>% select(date) %>% ymd()
library(magrittr)
# Transformation à opérer
test <- calendar %>% select(date) %>% ymd()
# Import relevant packages
library(dplyr)
library(lubridate)
string = "~/Documents/Formation/Github/0_Data/"
# Paris
listings_Paris <- read.csv(paste0(string, "Airbnb_Paris/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Paris <- read.csv(paste0(string, "Airbnb_Paris/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Paris <- read.csv(paste0(string, "Airbnb_Paris/calendar.csv"), encoding="UTF-8", comment.char="#")
# Bordeaux
listings_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/listings.csv"), encoding="UTF-8", comment.char="#")
gc()
# Import relevant packages
library(dplyr)
library(lubridate)
string = "~/Documents/Formation/Github/0_Data/"
# Paris
listings_Paris <- read.csv(paste0(string, "Airbnb_Paris/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Paris <- read.csv(paste0(string, "Airbnb_Paris/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Paris <- read.csv(paste0(string, "Airbnb_Paris/calendar.csv"), encoding="UTF-8", comment.char="#")
# Bordeaux
listings_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/calendar.csv"), encoding="UTF-8", comment.char="#")
# Lyon
listings_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/calendar.csv"), encoding="UTF-8", comment.char="#")
listings = rbind(listings_Paris, listings_Bordeaux, listings_Lyon)
reviews = rbind(reviews_Paris, reviews_Bordeaux, reviews_Lyon)
calendar = rbind(calendar_Paris, calendar_Bordeaux, calendar_Lyon)
# Remove individual files to free memory
rm(listings_Paris, listings_Bordeaux, listings_Lyon,
reviews_Paris, reviews_Bordeaux, reviews_Lyon,
calendar_Paris, calendar_Bordeaux, calendar_Lyon)
gc()
save.image("~/Documents/Formation/Github/0_Data/Airbnb_France_Rdata.Rhistory.RData")
# Transformation à opérer
test <- calendar %>% select(date) %>% ymd()
# Transformation à opérer
calendar %>% select(date)
library(magrittr)
# Transformation à opérer
calendar %>% select(date)
# Transformation à opérer
test = calendar %>% select(date)
# Transformation à opérer
test = select(calendar, date)
# Import relevant packages
library(dplyr)
# Transformation à opérer
test = select(calendar, date)
# Transformation à opérer
test = select(calendar, date)
load("~/Documents/Formation/Github/0_Data/Airbnb_France_Rdata.Rhistory.RData")
# Import relevant packages
library(dplyr)
library(lubridate)
# Transformation à opérer
test = calendar %>% select(date)
# Transformation à opérer
test = calendar %>% select(date)
library(magrittr)
# Transformation à opérer
test = calendar %>% select(date)
install.packages("dplyr")
# Import relevant packages
library(dplyr)
library(lubridate)
# Transformation à opérer
test = calendar %>% select(date)
install.packages("lifecycle")
# Import relevant packages
library(dplyr)
install.packages("lifecycle")
install.packages("lifecycle")
# Import relevant packages
library(dplyr)
library(lubridate)
# Transformation à opérer
test = calendar %>% select(date)
test = calendar %>% select(date)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(lazyeval)
library(assertthat)
library(backports)
remove.packages("assertthat", lib="~/R/win-library/4.0")
remove.packages("backports", lib="~/R/win-library/4.0")
remove.packages("blob", lib="~/R/win-library/4.0")
remove.packages("bit64", lib="~/R/win-library/4.0")
remove.packages("bit", lib="~/R/win-library/4.0")
remove.packages("crayon", lib="~/R/win-library/4.0")
library(fs)
remove.packages("fs", lib="~/R/win-library/4.0")
library(dbplyr)
test = calendar %>% select(date)
remove.packages("lifecycle", lib="~/R/win-library/4.0")
install.packages("lifecycle")
install.packages("lifecycle")
install.packages(c("dbplyr", "dplyr", "readxl", "rlang"))
# Import relevant packages
library(dplyr)
library(lubridate)
install.packages("dplyr")
install.packages("dplyr", dependencies = FALSE)
library(dplyr)
install.packages("lifecycle", dependencies = FALSE)
library(dplyr)
# Transformation à opérer
test = calendar %>% select(date)
install.packages("magrittr", dependencies = FALSE)
install.packages("tidyverse", dependencies = FALSE)
install.packages("tidyverse", dependencies = FALSE)
install.packages("magrittr", dependencies = FALSE)
install.packages("tidyverse", dependencies = FALSE)
install.packages("tidyverse", dependencies = FALSE)
library(magrittr)
# Transformation à opérer
test = calendar %>% select(date)
library(dplyr)
# Transformation à opérer
test = calendar %>% select(date)
library(tidyr)
# Transformation à opérer
test = calendar %>% select(date)
library(shiny)
library(shinydashboard)
library(shinythemes)
remove.packages("shiny", lib="~/R/win-library/4.0")
remove.packages("shinydashboard", lib="~/R/win-library/4.0")
remove.packages("shinythemes", lib="~/R/win-library/4.0")
install.packages("dplyr", dependencies = FALSE)
install.packages("lifecycle", dependencies = FALSE)
install.packages("rlang", dependencies = FALSE)
remove.packages(rlang)
install.packages("rlang")
.libPaths()
install.packages("dplyr")
library(dplyr)
data("mtcars")
glimpse(mtcars)
mtcars %>% select(vs, gear)
install.packages("lubridate")
install.packages("odbc")
install.packages("DBI")
# Import relevant packages
library(dplyr)
library(lubridate)
string = "~/Documents/Formation/Github/0_Data/"
# Paris
listings_Paris <- read.csv(paste0(string, "Airbnb_Paris/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Paris <- read.csv(paste0(string, "Airbnb_Paris/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Paris <- read.csv(paste0(string, "Airbnb_Paris/calendar.csv"), encoding="UTF-8", comment.char="#")
# Bordeaux
listings_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/calendar.csv"), encoding="UTF-8", comment.char="#")
# Lyon
listings_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/listings.csv"), encoding="UTF-8", comment.char="#")
reviews_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/reviews.csv"), encoding="UTF-8", comment.char="#")
calendar_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/calendar.csv"), encoding="UTF-8", comment.char="#")
listings = rbind(listings_Paris, listings_Bordeaux, listings_Lyon)
reviews = rbind(reviews_Paris, reviews_Bordeaux, reviews_Lyon)
calendar = rbind(calendar_Paris, calendar_Bordeaux, calendar_Lyon)
# Remove individual files to free memory
rm(listings_Paris, listings_Bordeaux, listings_Lyon,
reviews_Paris, reviews_Bordeaux, reviews_Lyon,
calendar_Paris, calendar_Bordeaux, calendar_Lyon)
gc()
# Metadata : nom des colonnes, leur type, nombre de lignes et colonnes
str(calendar)
str(reviews)
str(listings) # Attention, tout a été importé en string
# Transformation à opérer
test = select(calendar, date)
View(test)
save.image("~/Documents/Formation/Github/0_Data/Airbnb_France_Rdata.Rhistory.RData")
load("C:/Users/margo/Documents/Documents/Formation/Github/Airbnb_Database_SQL/Airbnb_France_SQLdatabase.RData")
# Import relevant packages
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(tm)
library(wordcloud)
string = "~/Documents/Formation/Github/0_Data/"
# Paris
listings_Paris <- read.csv(paste0(string, "Airbnb_Paris/listings.csv"), encoding="UTF-8")
reviews_Paris <- read.csv(paste0(string, "Airbnb_Paris/reviews.csv"), encoding="UTF-8")
calendar_Paris <- read.csv(paste0(string, "Airbnb_Paris/calendar.csv"), encoding="UTF-8")
# Bordeaux
listings_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/listings.csv"), encoding="UTF-8")
reviews_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/reviews.csv"), encoding="UTF-8")
calendar_Bordeaux <- read.csv(paste0(string, "Airbnb_Bordeaux/calendar.csv"), encoding="UTF-8")
# Lyon
listings_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/listings.csv"), encoding="UTF-8")
reviews_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/reviews.csv"), encoding="UTF-8")
calendar_Lyon <- read.csv(paste0(string, "Airbnb_Lyon/calendar.csv"), encoding="UTF-8")
# Add the data source in a column
listings_Paris = listings_Paris %>% mutate(city = 'Paris')
listings_Bordeaux = listings_Bordeaux %>% mutate(city = 'Bordeaux')
listings_Lyon = listings_Lyon %>% mutate(city = 'Lyon')
listings = rbind(listings_Paris, listings_Bordeaux, listings_Lyon)
reviews = rbind(reviews_Paris, reviews_Bordeaux, reviews_Lyon)
calendar = rbind(calendar_Paris, calendar_Bordeaux, calendar_Lyon)
# Remove individual files to free memory
rm(listings_Paris, listings_Bordeaux, listings_Lyon,
reviews_Paris, reviews_Bordeaux, reviews_Lyon,
calendar_Paris, calendar_Bordeaux, calendar_Lyon)
gc()
# Structure: Database "Listings"
str(listings)
# Transform date columns into date format
# Remarque : A optimiser, par l'usage de fonctions ????
listings <-listings %>%
mutate(host_since = ymd(host_since),
last_scraped = ymd(last_scraped),
calendar_last_scraped = ymd(calendar_last_scraped),
first_review = ymd(first_review),
last_review = ymd(last_review))
# Tranformer les % en floats
# Le signe % fait que c'est interprété comme du texte
listings$host_response_rate <-gsub("%","", listings$host_response_rate)
listings$host_acceptance_rate <-gsub("%","", listings$host_acceptance_rate)
listings$host_response_rate = as.numeric(listings$host_response_rate) /100
listings$host_acceptance_rate = as.numeric(listings$host_acceptance_rate) /100
#Transformer les scores en variables numériques
# Je veux m'assurer que toutes les lignes sont exprimées en $
listings %>% filter(!grepl('$', price)) #ça ne renvoie aucun résultat -> OK on peut retirer le signe dollar
listings$price <- as.numeric(str_sub(listings$price, 2, -2))
# Transformer les variables booléennes en flags
listings = listings %>%
mutate(instant_bookable = case_when(instant_bookable=='f' ~ 0, instant_bookable=='t' ~ 1),
has_availability = case_when(has_availability=='f' ~ 0, has_availability=='t' ~ 1),
host_identity_verified = case_when(host_identity_verified=='f' ~ 0, host_identity_verified=='t' ~ 1),
host_has_profile_pic = case_when(host_has_profile_pic=='f' ~ 0, host_has_profile_pic=='t' ~ 1),
host_is_superhost = case_when(host_is_superhost=='f' ~ 0, host_is_superhost=='t' ~ 1),
)
#Transformer facteurs les variables categories
listings$host_response_time = as.factor(listings$host_response_time)
listings$room_type = as.factor(listings$room_type)
listings$property_type = as.factor(listings$property_type)
listings_table = as.data.frame(table(listings$room_type, listings$property_type))
#Créer des ID en strings (on ne les somme pas, ce sont des IDs!)
listings$id = as.character(listings$id)
listings$host_id = as.character(listings$host_id)
# Base de données reviews
reviews$date = ymd(reviews$date)
reviews$year = year(reviews$date)
# Objectif: Je veux explorer les données Listings sous Rshiny, avec un dashboard reactif
summary(listings)
# 4.1 BANS / ordres de grandeur
BAN_listings = listings %>%
summarise(nb_listings = n(),
nb_hosts = n_distinct(host_id),
nb_cities = n_distinct(city),
avg_satcli = round(mean(review_scores_rating, na.rm = TRUE),2),
avg_price = round(mean(price, na.rm = TRUE),2))
BAN_reviews = reviews %>%
filter(year=='2021') %>%
summarise(nb_reviews = n(),
nb_reviewers = n_distinct(reviewer_id))
# 4.2. Listings charactertistics
listings_summary = listings %>%
group_by(city, room_type, property_type, neighbourhood_cleansed, accommodates, bedrooms) %>%
summarise(nb_listings_charac = n()) %>%
mutate(city_neighbourhood_cleansed = paste(city, "-", neighbourhood_cleansed))
listings_summary = as.data.frame(listings_summary)
#Focus : Wordcloud
text <- listings$amenities
docs <- Corpus(VectorSource(text))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
df = df %>% filter(freq >20)
rm(text, docs, dtm, matrix, words)
gc()
library(shiny); runApp('Documents/Formation/Github/Airbnb_Database_SQL/Rshiny_dashboard_version2.R')
cd("C:\Users\margo\Documents\Documents\Formation\Github\Airbnb_Database_Rstudio")
cd("C:/Users/margo/Documents/Documents/Formation/Github/Airbnb_Database_Rstudio")
setwd("~/")
setwd("~/Documents/Formation/Github/Airbnb_Database_Rstudio")
runApp('Airbnb_Rshiny_app.R')
runApp('Airbnb_Rshiny_app.R')
runApp('Airbnb_Rshiny_app.R')
runApp('Airbnb_Rshiny_app.R')
